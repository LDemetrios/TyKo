import java.nio.channels.*;
import java.io.*;
import java.util.*;

public class NonBlockingStreamMonitor {
    public static void monitorStreams(List<InputStream> streams) throws IOException {
        Selector selector = Selector.open();

        for (InputStream stream : streams) {
            ReadableByteChannel channel = Channels.newChannel(stream);
            channel.configureBlocking(false);
            channel.register(selector, SelectionKey.OP_READ);
        }

        while (true) {
            if (selector.select() > 0) {
                Set<SelectionKey> selectedKeys = selector.selectedKeys();
                Iterator<SelectionKey> keyIterator = selectedKeys.iterator();

                while (keyIterator.hasNext()) {
                    SelectionKey key = keyIterator.next();
                    if (key.isReadable()) {
                        ReadableByteChannel channel = (ReadableByteChannel) key.channel();
                        // Process the data from this channel
                        processData(channel);
                    }
                    keyIterator.remove();
                }
            }
        }
    }

    private static void processData(ReadableByteChannel channel) {
        // Implement your data processing logic here
    }
}
